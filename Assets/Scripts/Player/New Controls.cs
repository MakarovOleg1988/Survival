//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Player/New Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Survival
{
    public partial class @NewControls : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @NewControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""New Controls"",
    ""maps"": [
        {
            ""name"": ""New Action Map"",
            ""id"": ""50688463-5c5e-4100-80cb-69e2baaba642"",
            ""actions"": [
                {
                    ""name"": ""MovementUp"",
                    ""type"": ""Value"",
                    ""id"": ""a43d4a6f-4822-4a07-a88c-dccbc95794f9"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MovementRight"",
                    ""type"": ""Value"",
                    ""id"": ""413394cc-7de0-4f45-afc0-78df8fa8c37d"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""1f7b1d8b-0b96-468f-8399-b6f3da74df16"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementUp"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""0255c028-16ce-4582-bcce-4e72162681c4"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""0e2268db-7038-4355-8035-73a7ec87c293"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""0fbc7904-180a-4382-b692-c7db193c661c"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementRight"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""3a001c94-25c3-45bf-ba1e-d35ecdf4ea5a"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""92776aa5-6c84-4d7d-8c26-56155321ee2c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Joystick"",
            ""id"": ""7214541e-5ea0-4b81-b9fc-d90456f79776"",
            ""actions"": [
                {
                    ""name"": ""Delta"",
                    ""type"": ""PassThrough"",
                    ""id"": ""1685f775-5494-4135-b9b3-25207091dfe9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""86fe5ca8-4ee1-4343-b810-bf480d2585e4"",
                    ""path"": ""<AndroidJoystick>/stick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Delta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // New Action Map
            m_NewActionMap = asset.FindActionMap("New Action Map", throwIfNotFound: true);
            m_NewActionMap_MovementUp = m_NewActionMap.FindAction("MovementUp", throwIfNotFound: true);
            m_NewActionMap_MovementRight = m_NewActionMap.FindAction("MovementRight", throwIfNotFound: true);
            // Joystick
            m_Joystick = asset.FindActionMap("Joystick", throwIfNotFound: true);
            m_Joystick_Delta = m_Joystick.FindAction("Delta", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // New Action Map
        private readonly InputActionMap m_NewActionMap;
        private INewActionMapActions m_NewActionMapActionsCallbackInterface;
        private readonly InputAction m_NewActionMap_MovementUp;
        private readonly InputAction m_NewActionMap_MovementRight;
        public struct NewActionMapActions
        {
            private @NewControls m_Wrapper;
            public NewActionMapActions(@NewControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @MovementUp => m_Wrapper.m_NewActionMap_MovementUp;
            public InputAction @MovementRight => m_Wrapper.m_NewActionMap_MovementRight;
            public InputActionMap Get() { return m_Wrapper.m_NewActionMap; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(NewActionMapActions set) { return set.Get(); }
            public void SetCallbacks(INewActionMapActions instance)
            {
                if (m_Wrapper.m_NewActionMapActionsCallbackInterface != null)
                {
                    @MovementUp.started -= m_Wrapper.m_NewActionMapActionsCallbackInterface.OnMovementUp;
                    @MovementUp.performed -= m_Wrapper.m_NewActionMapActionsCallbackInterface.OnMovementUp;
                    @MovementUp.canceled -= m_Wrapper.m_NewActionMapActionsCallbackInterface.OnMovementUp;
                    @MovementRight.started -= m_Wrapper.m_NewActionMapActionsCallbackInterface.OnMovementRight;
                    @MovementRight.performed -= m_Wrapper.m_NewActionMapActionsCallbackInterface.OnMovementRight;
                    @MovementRight.canceled -= m_Wrapper.m_NewActionMapActionsCallbackInterface.OnMovementRight;
                }
                m_Wrapper.m_NewActionMapActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @MovementUp.started += instance.OnMovementUp;
                    @MovementUp.performed += instance.OnMovementUp;
                    @MovementUp.canceled += instance.OnMovementUp;
                    @MovementRight.started += instance.OnMovementRight;
                    @MovementRight.performed += instance.OnMovementRight;
                    @MovementRight.canceled += instance.OnMovementRight;
                }
            }
        }
        public NewActionMapActions @NewActionMap => new NewActionMapActions(this);

        // Joystick
        private readonly InputActionMap m_Joystick;
        private IJoystickActions m_JoystickActionsCallbackInterface;
        private readonly InputAction m_Joystick_Delta;
        public struct JoystickActions
        {
            private @NewControls m_Wrapper;
            public JoystickActions(@NewControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Delta => m_Wrapper.m_Joystick_Delta;
            public InputActionMap Get() { return m_Wrapper.m_Joystick; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(JoystickActions set) { return set.Get(); }
            public void SetCallbacks(IJoystickActions instance)
            {
                if (m_Wrapper.m_JoystickActionsCallbackInterface != null)
                {
                    @Delta.started -= m_Wrapper.m_JoystickActionsCallbackInterface.OnDelta;
                    @Delta.performed -= m_Wrapper.m_JoystickActionsCallbackInterface.OnDelta;
                    @Delta.canceled -= m_Wrapper.m_JoystickActionsCallbackInterface.OnDelta;
                }
                m_Wrapper.m_JoystickActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Delta.started += instance.OnDelta;
                    @Delta.performed += instance.OnDelta;
                    @Delta.canceled += instance.OnDelta;
                }
            }
        }
        public JoystickActions @Joystick => new JoystickActions(this);
        public interface INewActionMapActions
        {
            void OnMovementUp(InputAction.CallbackContext context);
            void OnMovementRight(InputAction.CallbackContext context);
        }
        public interface IJoystickActions
        {
            void OnDelta(InputAction.CallbackContext context);
        }
    }
}
